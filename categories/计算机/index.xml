<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>计算机 on 贤民的比特记忆</title>
    <link>http://www.xianmin.org/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/</link>
    <description>Recent content in 计算机 on 贤民的比特记忆</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 10 Jan 2018 00:00:00 +0800</lastBuildDate>
    
        <atom:link href="http://www.xianmin.org/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>一些 Visual Studio Code 的使用技巧</title>
      <link>http://www.xianmin.org/post/vscode/</link>
      <pubDate>Wed, 10 Jan 2018 00:00:00 +0800</pubDate>
      
      <guid>http://www.xianmin.org/post/vscode/</guid>
      
        <description>&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Visual Studio Code&lt;/code&gt; （以下简称 VSCode）是微软推出的一款轻量级、免费开源、跨平台的编辑器。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;官方文档： &lt;a href=&#34;https://code.visualstudio.com/docs&#34;&gt;https://code.visualstudio.com/docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;VScode github 地址： &lt;a href=&#34;https://github.com/Microsoft/vscode&#34;&gt;https://github.com/Microsoft/vscode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://code.visualstudio.com/docs/getstarted/tips-and-tricks#_editing-hacks&#34;&gt;Visual Studio Tips and Tricks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本文旨在分享我个人的 VSCode 使用经验，更权威的使用指南请查阅官方文档。关于 VSCode 的优缺点，与其他编辑器的比较等等，不在本文的讨论范畴。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;

&lt;p&gt;官网下载地址： &lt;a href=&#34;https://code.visualstudio.com/download&#34;&gt;Download Visual Studio Code - Mac, Linux, Windows&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;如果你和我一样使用 Deepin Linux，可以直接从 Deepin Store 进行安装。&lt;/p&gt;

&lt;h2 id=&#34;界面&#34;&gt;界面&lt;/h2&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://www.xianmin.org/image/vscode/00.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h2 id=&#34;特色-与常见编辑器不同的地方&#34;&gt;特色（与常见编辑器不同的地方）&lt;/h2&gt;

&lt;h3 id=&#34;标签预览模式&#34;&gt;标签预览模式&lt;/h3&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://www.xianmin.org/image/vscode/01.gif&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;VSCode 中的标签和我们平常使用的软件中的标签不太一样，我开始的时候很疑惑，为什么 VSCode 打开新文件不是在新标签中打开，后来才知道是因为它默认开启了“预览模式”（Preview mode）。预览模式中的“标签名字体”显示的是 &lt;strong&gt;斜体&lt;/strong&gt; ， &lt;strong&gt;单击文件&lt;/strong&gt; 不会开启新的标签， &lt;strong&gt;双击文件&lt;/strong&gt; 或者 &lt;strong&gt;双击标签&lt;/strong&gt; 就可以将文件固定了。&lt;/p&gt;

&lt;p&gt;在设置中可以取消预览模式： &lt;code&gt;workbench.editor.enablePreview&lt;/code&gt; 。&lt;/p&gt;

&lt;h3 id=&#34;命令面板&#34;&gt;命令面板&lt;/h3&gt;

&lt;p&gt;快捷键 &lt;code&gt;Ctrl+Shift+P&lt;/code&gt; 呼出命令面板，通过命令面板可以快速使用一些指令。&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://www.xianmin.org/image/vscode/02.gif&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h3 id=&#34;peek-definition&#34;&gt;Peek Definition&lt;/h3&gt;

&lt;p&gt;这个功能，可以快速预览函数（或类）的定义内容，右键菜单中有选项，或者用快捷键 &lt;code&gt;Ctrl+shift+F10&lt;/code&gt; 。&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://www.xianmin.org/image/vscode/references.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h2 id=&#34;编辑相关技巧&#34;&gt;编辑相关技巧&lt;/h2&gt;

&lt;h3 id=&#34;快捷键&#34;&gt;快捷键&lt;/h3&gt;

&lt;p&gt;官方文档： &lt;a href=&#34;https://code.visualstudio.com/docs/getstarted/keybindings&#34;&gt;Visual Studio Code Key Bindings&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;熟练使用快捷键可以极大的提高效率，但是不同编辑器的快捷键一般都不一样，为了减少迁移后改变习惯的代价，可以通过安装扩展解决这个问题。比如我要将 VSCode 的快捷键设定改为 Emacs 的设定，安装下面这个扩展就行了。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=lfs.vscode-emacs-friendly&#34;&gt;Emacs Friendly Keymap - Visual Studio Marketplace&lt;/a&gt; （ &lt;strong&gt;官方推荐的那个没有再维护了&lt;/strong&gt; ）&lt;/p&gt;

&lt;p&gt;由于 &lt;code&gt;Ctrl&lt;/code&gt; 是一个经常需要用到的按键，不妨将 &lt;code&gt;Ctrl&lt;/code&gt; 和 &lt;code&gt;CapsLock&lt;/code&gt; 这两个键调换。调换之后再按 &lt;code&gt;Ctrl&lt;/code&gt; 就舒服快捷的多。&lt;/p&gt;

&lt;h3 id=&#34;多光标编辑-multi-cursor-selection&#34;&gt;多光标编辑 Multi cursor selection&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基本：&lt;/strong&gt; &lt;code&gt;Alt+Click&lt;/code&gt; 即，按住 Alt 键，依次单击（或者选择）需要编辑的位置，可以依次添加光标。 Alt 键可以在设置中更改。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一列多光标：&lt;/strong&gt; &lt;code&gt;Shift+Alt+Down&lt;/code&gt; 或者 &lt;code&gt;Shift+Alt+Up&lt;/code&gt; 可以在上下位置添加光标。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依次选中相同单词：&lt;/strong&gt; 选中一个单词，按 &lt;code&gt;Ctrl+D&lt;/code&gt; ，可以依次选中下一个相同单词。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;选中所有相同单词：&lt;/strong&gt; 选中一个单词，按 &lt;code&gt;Ctrl+Shift+L&lt;/code&gt; ，可以一次性选中文本中 &lt;strong&gt;所有相同单词&lt;/strong&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;矩形选择：&lt;/strong&gt; 按住 &lt;code&gt;Shift+Alt&lt;/code&gt; ，再进行选择，则选择区域是一个矩形。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;括号选择：&lt;/strong&gt; &lt;code&gt;Shift+Alt+Right&lt;/code&gt; ，会选中匹配括号中的内容，并可以扩大选中区域。&lt;/li&gt;
&lt;/ul&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://www.xianmin.org/image/vscode/multicursor.gif&#34; /&gt;
    
    
&lt;/figure&gt;



&lt;figure &gt;
    
        &lt;img src=&#34;http://www.xianmin.org/image/vscode/column-select.gif&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h3 id=&#34;辅助线&#34;&gt;辅助线&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;显示代码缩进的辅助线，设置 &amp;ldquo;editor.renderIndentGuides&amp;rdquo;: true&lt;/li&gt;
&lt;li&gt;代码长度标尺，比如在第80列的地方显示标尺，设置 &amp;ldquo;editor.rulers&amp;rdquo;: [80]&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;zenmode-让编辑界面更简洁&#34;&gt;zenmode——让编辑界面更简洁&lt;/h2&gt;

&lt;p&gt;如果你像我一样，有时候需要一边开着浏览器（或者终端等等）一边编辑文件，那么使用 &lt;code&gt;zenmode&lt;/code&gt; 模式，则可以使 VSCode 的界面更加简洁。&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://www.xianmin.org/image/vscode/03.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;小技巧：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;设置 &amp;ldquo;zenMode.fullScreen&amp;rdquo;: false ，默认为全屏。&lt;/li&gt;
&lt;li&gt;设置 &amp;ldquo;window.menuBarVisibility&amp;rdquo;: &amp;ldquo;toggle&amp;rdquo; ，这样可以在需要的时候显示目录栏。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;设置的级别&#34;&gt;设置的级别&lt;/h2&gt;

&lt;p&gt;官方文档： &lt;a href=&#34;https://code.visualstudio.com/docs/getstarted/settings&#34;&gt;Visual Studio Code User and Workspace Settings&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;vscode 的设置分三个级别：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;默认设置（安装完成后）&lt;/li&gt;
&lt;li&gt;用户设置（用户自行修改的设定）&lt;/li&gt;
&lt;li&gt;工作区设置（团队项目下的统一设定）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;优先级依次递增。即，优先采用工作区的设置，再采用用户的个人设置，最后采用默认设置。&lt;/p&gt;

&lt;p&gt;对于团队项目，一些规范设置可以通过在项目目录下新建一个 &lt;code&gt;.vscode/setting.json&lt;/code&gt; 文件进行配置。&lt;/p&gt;

&lt;h2 id=&#34;一些不错的扩展&#34;&gt;一些不错的扩展&lt;/h2&gt;

&lt;h3 id=&#34;官方推荐&#34;&gt;官方推荐&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome&#34;&gt;Debugger for Chrome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint&#34;&gt;ESLint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner&#34;&gt;Code Runner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;等等支持各种程序语言的扩展&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;bookmarks&#34;&gt;Bookmarks&lt;/h3&gt;

&lt;p&gt;地址： &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=alefragnani.Bookmarks&#34;&gt;Bookmarks - Visual Studio Marketplace&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;为 VSCode 添加书签功能，方便跳转。&lt;/p&gt;

&lt;h3 id=&#34;git-history&#34;&gt;Git History&lt;/h3&gt;

&lt;p&gt;地址： &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=donjayamanne.githistory&#34;&gt;Git History (git log) - Visual Studio Marketplace&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;非常方便的查看 Git Log，也算是必装的一个扩展了。&lt;/p&gt;

&lt;h3 id=&#34;path-intellisense&#34;&gt;Path Intellisense&lt;/h3&gt;

&lt;p&gt;地址： &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense&#34;&gt;Path Intellisense - Visual Studio Marketplace&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;自动补全路径以及文件名。&lt;/p&gt;

&lt;h2 id=&#34;debug&#34;&gt;&lt;span class=&#34;todo TODO_&#34;&gt;TODO &lt;/span&gt; DEBUG&lt;/h2&gt;</description>
      
    </item>
    
    <item>
      <title>JavaScript —— this 绑定</title>
      <link>http://www.xianmin.org/post/javascript-this/</link>
      <pubDate>Tue, 14 Nov 2017 14:39:00 +0800</pubDate>
      
      <guid>http://www.xianmin.org/post/javascript-this/</guid>
      
        <description>&lt;p&gt;Google 搜索出来的两个不错的链接：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jeffjade.com/2015/08/03/2015-08-03-javascript-this/&#34;&gt;JavaScript 之 this 详解 | 晚晴幽草轩&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://segmentfault.com/a/1190000003046071&#34;&gt;JS 中 this 关键字详解 - JSer - SegmentFault&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我是先阅读的 &lt;a href=&#34;https://github.com/getify/You-Dont-Know-JS/blob/master/this%20&amp;amp;%20object%20prototypes/README.md#you-dont-know-js-this--object-prototypes&#34;&gt;You-Dont-Know-JS: this &amp;amp; Object Prototypes&lt;/a&gt; 。再回过头看上面的那两篇文章，我觉得他们讲解的太复杂了，而 《You-Dont-Know-JS》 就归纳的非常好。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;以下是总结笔记：&lt;/p&gt;

&lt;p&gt;JS 中的 &lt;code&gt;this&lt;/code&gt; 总是指向一个对象 (Object)，这个对象是基于函数运行时 &lt;strong&gt;动态绑定&lt;/strong&gt; 的。要判断 &lt;code&gt;this&lt;/code&gt; 的绑定对象，首先找到这个函数的直接调用位置，然后应用下面四条规则来判断：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;（new 绑定）由 &lt;code&gt;new&lt;/code&gt; 调用？绑定到新创建的对象。&lt;/li&gt;
&lt;li&gt;（强制绑定）由 &lt;code&gt;call&lt;/code&gt; 或者 &lt;code&gt;apply&lt;/code&gt; （或者 &lt;code&gt;bind&lt;/code&gt; ）调用？绑定到指定的对象。&lt;/li&gt;
&lt;li&gt;（隐式绑定）由上下文对象调用？绑定到那个上下文对象。&lt;/li&gt;
&lt;li&gt;（默认绑定）在严格模式下绑定到 &lt;code&gt;undefined&lt;/code&gt; ，否则绑定到全局对象。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;例外，ES6 中的箭头函数会继承外层函数调用的 &lt;code&gt;this&lt;/code&gt; 绑定。（和 ES6 之前代码中的 &lt;code&gt;self = this&lt;/code&gt; 机制一样）&lt;/p&gt;

&lt;h2 id=&#34;默认绑定&#34;&gt;默认绑定&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function foo() {
  console.log( this.a );
}

var a = 2;

foo(); // 输出 2
// 绑定到全局对象 a， 如果是严格模式，绑定到 undefined
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;隐式绑定&#34;&gt;隐式绑定&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function foo() {
  console.log( this.a );
}

var obj = {
  a: 2,
  foo: foo
};

obj.foo(); // 输出 2
// 由对象 obj 调用，绑定到 obj
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;注意-隐式绑定的丢失问题&#34;&gt;注意：隐式绑定的丢失问题&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function foo() {
  console.log( this.a );
}

var obj = {
  a: 2,
  foo: foo
};

var bar = obj.foo; // 注意这个引用！

var a = &amp;quot;oops, global&amp;quot;; // 全局对象 a

bar(); // 输出： &amp;quot;oops, global&amp;quot; 绑定丢失！

setTimeout( obj.foo, 100 ); // 输出： &amp;quot;oops, global&amp;quot; 绑定丢失！
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;强制绑定-apply-call-bind&#34;&gt;强制绑定： apply, call, bind&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function foo() {
  console.log( this.a );
}

var obj = {
  a: 2
};

var bar = function() {
  foo.call( obj ); // 将 foo 的 this 强制绑定到对象 obj
};

bar(); // 输出：2
setTimeout( bar, 100 ); // 输出： 2

// 强制绑定的对象无法被覆盖
bar.call( window ); // 2
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;new-绑定&#34;&gt;new 绑定&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function foo(a) {
  this.a = a;
}

var bar = new foo( 2 ); // 使用 new 绑定到对象 bar
console.log( bar.a ); // 输出 2
&lt;/code&gt;&lt;/pre&gt;</description>
      
    </item>
    
    <item>
      <title>Linux 下，使用 Git 管理 dotfiles（配置文件）</title>
      <link>http://www.xianmin.org/post/02-manage-dotfiles/</link>
      <pubDate>Wed, 01 Mar 2017 18:03:09 +0800</pubDate>
      
      <guid>http://www.xianmin.org/post/02-manage-dotfiles/</guid>
      
        <description>&lt;p&gt;作为一个计算机深度使用者，并且长期使用 Linux 作为主要操作系统，折腾各种功能强大的软件是常有的事儿。而这些软件有它们各自的配置文件，通常以 &lt;code&gt;.&lt;/code&gt; 开头，管它们叫 &lt;code&gt;dotfiles&lt;/code&gt; 。一旦 dotfiles 的数量增多，并且所在的位置不同，怎样合理有效的管理它们是一个问题。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;一个简单的方法是：将所有配置文件统一丢进一个文件夹，用 git 进行管理，用 &lt;code&gt;ln -s&lt;/code&gt; 链接到原来的位置（比如家目录下）。&lt;/p&gt;

&lt;p&gt;我在这里推荐一个命令行脚本——&lt;a href=&#34;https://github.com/dotphiles/dotsync&#34;&gt;dotsync&lt;/a&gt; ，它可以将上面的方法更加简化，并且在不同机器上进行同步。&lt;/p&gt;

&lt;h1 id=&#34;dotsync-的使用步骤&#34;&gt;dotsync 的使用步骤&lt;/h1&gt;

&lt;p&gt;第一步，将 dotsync 克隆下来，在家目录下创建一个 &lt;code&gt;Dotfiles&lt;/code&gt; 文件夹（名称任意），把 dotsync 中的配置模板 &lt;code&gt;dotsyncrc&lt;/code&gt; 文件复制进去。&lt;/p&gt;

&lt;p&gt;第二步，把所有需要管理的 dotfiles 复制到 &lt;code&gt;Dotfiles/&lt;/code&gt; 目录中（例如 .vimrc, .zshrc 等等）。&lt;/p&gt;

&lt;p&gt;第三步，修改 &lt;code&gt;dotsyncrc&lt;/code&gt; 这个配置文件。如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Location of your dotfiles in $HOME
DOTFILES=Dotfiles
    
# 添加你需要链接的文件
[files]
dotsyncrc                       # 相当于 ln -s dotsyncrc ~/.dotsyncrc
emacs/xm-spacemacs:.emacs.d     # 相当于 ln -s emacs/xm-spacemacs ~/.emacs.d
emacs/spacemacs                 # 相当于 ln -s emacs/spacemacs ~/.spacemacs
# ... 等等
[endfiles]
    
[hosts]
xm-pc git=ANY                   # 计算机名称
[endhosts]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第四步，运行 dotsync 命令。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 假设你把 dotsync 克隆到了家目录下

~/dotsync/bin/dotsync           # 运行，会提示你选择参数
~/dotsync/bin/dotsync -l        # 查看将要链接的文件列表
~/dotsync/bin/dotsync -f ~/Dotfiles/dotsyncrc -L # -f 指定配置文件，-L 生成软链接
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个时候，你在 &lt;code&gt;dotsyncrc&lt;/code&gt; 中指定的文件，都在指定位置创建了软链接。如果文件已经存在，它们都将备份到 &lt;code&gt;~/.backup/&lt;/code&gt; 目录。当你编辑软链接文件的时候，实际上编辑的是 Dotfiles 目录中的源文件。&lt;/p&gt;

&lt;p&gt;第五步，可以使用 git 管理备份 Dotfiles 文件夹了。&lt;/p&gt;

&lt;h1 id=&#34;将-dotsync-添加到-shell-的-path-路径&#34;&gt;将 dotsync 添加到 Shell 的 PATH 路径&lt;/h1&gt;

&lt;p&gt;一个问题：怎样在命令行中直接使用 dotsync？&lt;/p&gt;

&lt;p&gt;我在 &lt;code&gt;Dotfiles/&lt;/code&gt; 目录下创建了一个 &lt;code&gt;bin/&lt;/code&gt; 目录，专门用来存放一些用户自己编写的脚本。然后把这个 bin 目录添加到 shell 的 PATH 路径，即在 .zshrc 文件中添加一行：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export PATH=&amp;quot;$HOME/Dotfiles/bin:$PATH&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;source ~/.zshrc                 # 重载 zshrc 文件
$PATH                           # 查看 PATH
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样，我们就可以直接在命令行中直接使用 dotsync 这个命令了。&lt;/p&gt;

&lt;h1 id=&#34;参考链接&#34;&gt;参考链接&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dotphiles/dotphiles&#34;&gt;dotphiles/dotphiles: A community driven framework of dotfiles.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://notes.11ten.net/use-dotfiles.html&#34;&gt;Dotfiles 备份与同步配置文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.coderzh.com/2016/03/19/dotfiles/&#34;&gt;懒程序员和他的 dotfiles - CoderZh Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jcouyang/dotfiles&#34;&gt;jcouyang/dotfiles: Jichao Ouyang&amp;rsquo;s awesome dotfiles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dotfiles.github.io/&#34;&gt;GitHub does dotfiles - dotfiles.github.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
      
    </item>
    
  </channel>
</rss>