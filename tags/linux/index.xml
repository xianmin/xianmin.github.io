<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on 贤民的比特记忆</title>
    <link>http://www.xianmin.org/tags/linux/</link>
    <description>Recent content in Linux on 贤民的比特记忆</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 01 Mar 2017 18:03:09 +0800</lastBuildDate>
    
        <atom:link href="http://www.xianmin.org/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Linux 下，使用 Git 管理 dotfiles（配置文件）</title>
      <link>http://www.xianmin.org/post/02-manage-dotfiles/</link>
      <pubDate>Wed, 01 Mar 2017 18:03:09 +0800</pubDate>
      
      <guid>http://www.xianmin.org/post/02-manage-dotfiles/</guid>
      
        <description>&lt;p&gt;作为一个计算机深度使用者，并且长期使用 Linux 作为主要操作系统，折腾各种功能强大的软件是常有的事儿。而这些软件有它们各自的配置文件，通常以 &lt;code&gt;.&lt;/code&gt; 开头，管它们叫 &lt;code&gt;dotfiles&lt;/code&gt; 。一旦 dotfiles 的数量增多，并且所在的位置不同，怎样合理有效的管理它们是一个问题。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;一个简单的方法是：将所有配置文件统一丢进一个文件夹，用 git 进行管理，用 &lt;code&gt;ln -s&lt;/code&gt; 链接到原来的位置（比如家目录下）。&lt;/p&gt;

&lt;p&gt;我在这里推荐一个命令行脚本——&lt;a href=&#34;https://github.com/dotphiles/dotsync&#34;&gt;dotsync&lt;/a&gt; ，它可以将上面的方法更加简化，并且在不同机器上进行同步。&lt;/p&gt;

&lt;h1 id=&#34;dotsync-的使用步骤&#34;&gt;dotsync 的使用步骤&lt;/h1&gt;

&lt;p&gt;第一步，将 dotsync 克隆下来，在家目录下创建一个 &lt;code&gt;Dotfiles&lt;/code&gt; 文件夹（名称任意），把 dotsync 中的配置模板 &lt;code&gt;dotsyncrc&lt;/code&gt; 文件复制进去。&lt;/p&gt;

&lt;p&gt;第二步，把所有需要管理的 dotfiles 复制到 &lt;code&gt;Dotfiles/&lt;/code&gt; 目录中（例如 .vimrc, .zshrc 等等）。&lt;/p&gt;

&lt;p&gt;第三步，修改 &lt;code&gt;dotsyncrc&lt;/code&gt; 这个配置文件。如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Location of your dotfiles in $HOME
DOTFILES=Dotfiles
    
# 添加你需要链接的文件
[files]
dotsyncrc                       # 相当于 ln -s dotsyncrc ~/.dotsyncrc
emacs/xm-spacemacs:.emacs.d     # 相当于 ln -s emacs/xm-spacemacs ~/.emacs.d
emacs/spacemacs                 # 相当于 ln -s emacs/spacemacs ~/.spacemacs
# ... 等等
[endfiles]
    
[hosts]
xm-pc git=ANY                   # 计算机名称
[endhosts]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第四步，运行 dotsync 命令。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 假设你把 dotsync 克隆到了家目录下

~/dotsync/bin/dotsync           # 运行，会提示你选择参数
~/dotsync/bin/dotsync -l        # 查看将要链接的文件列表
~/dotsync/bin/dotsync -f ~/Dotfiles/dotsyncrc -L # -f 指定配置文件，-L 生成软链接
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个时候，你在 &lt;code&gt;dotsyncrc&lt;/code&gt; 中指定的文件，都在指定位置创建了软链接。如果文件已经存在，它们都将备份到 &lt;code&gt;~/.backup/&lt;/code&gt; 目录。当你编辑软链接文件的时候，实际上编辑的是 Dotfiles 目录中的源文件。&lt;/p&gt;

&lt;p&gt;第五步，可以使用 git 管理备份 Dotfiles 文件夹了。&lt;/p&gt;

&lt;h1 id=&#34;将-dotsync-添加到-shell-的-path-路径&#34;&gt;将 dotsync 添加到 Shell 的 PATH 路径&lt;/h1&gt;

&lt;p&gt;一个问题：怎样在命令行中直接使用 dotsync？&lt;/p&gt;

&lt;p&gt;我在 &lt;code&gt;Dotfiles/&lt;/code&gt; 目录下创建了一个 &lt;code&gt;bin/&lt;/code&gt; 目录，专门用来存放一些用户自己编写的脚本。然后把这个 bin 目录添加到 shell 的 PATH 路径，即在 .zshrc 文件中添加一行：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export PATH=&amp;quot;$HOME/Dotfiles/bin:$PATH&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;source ~/.zshrc                 # 重载 zshrc 文件
$PATH                           # 查看 PATH
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样，我们就可以直接在命令行中直接使用 dotsync 这个命令了。&lt;/p&gt;

&lt;h1 id=&#34;参考链接&#34;&gt;参考链接&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dotphiles/dotphiles&#34;&gt;dotphiles/dotphiles: A community driven framework of dotfiles.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://notes.11ten.net/use-dotfiles.html&#34;&gt;Dotfiles 备份与同步配置文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.coderzh.com/2016/03/19/dotfiles/&#34;&gt;懒程序员和他的 dotfiles - CoderZh Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jcouyang/dotfiles&#34;&gt;jcouyang/dotfiles: Jichao Ouyang&amp;rsquo;s awesome dotfiles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dotfiles.github.io/&#34;&gt;GitHub does dotfiles - dotfiles.github.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
      
    </item>
    
  </channel>
</rss>